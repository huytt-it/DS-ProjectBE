// <auto-generated />
using System;
using Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220316095056_AddDSEntity")]
    partial class AddDSEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AreaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Scale")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("VisualTypeId")
                        .HasColumnName("VisualTypeID")
                        .HasColumnType("int");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<decimal?>("WidthPercent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("AreaId");

                    b.HasIndex("LayoutId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("Data.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Data.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Data.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Data.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Data.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BrandID")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isActive")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BrandID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreateDateTime")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Data.Models.DSBuilding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DSBuilding");
                });

            modelBuilder.Entity("Data.Models.DSMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId");

                    b.ToTable("DSMedia");
                });

            modelBuilder.Entity("Data.Models.DSMonitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSlot")
                        .HasColumnType("int");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("DSMonitor");
                });

            modelBuilder.Entity("Data.Models.DSUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DSUser");
                });

            modelBuilder.Entity("Data.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHorizontal")
                        .HasColumnName("isHorizontal")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("MatchingCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ScreenName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DeviceId");

                    b.HasIndex("LocationId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Data.Models.DeviceScenario", b =>
                {
                    b.Property<int>("DeviceScenationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceScenationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutID")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioId")
                        .HasColumnName("ScenarioID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TimesToPlay")
                        .HasColumnType("int");

                    b.HasKey("DeviceScenationId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ScenarioId", "LayoutId");

                    b.ToTable("DeviceScenario");
                });

            modelBuilder.Entity("Data.Models.Layout", b =>
                {
                    b.Property<int>("LayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LayoutID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHorizontal")
                        .HasColumnName("isHorizontal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnName("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LayoutSrc")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("URL")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("LayoutId");

                    b.ToTable("Layout");
                });

            modelBuilder.Entity("Data.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.HasIndex("BrandId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Data.Models.MediaSrc", b =>
                {
                    b.Property<int>("MediaSrcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MediaSrcID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnName("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityHash")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaSrcId");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("MediaSrc");
                });

            modelBuilder.Entity("Data.Models.MediaType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TypeId");

                    b.ToTable("MediaType");
                });

            modelBuilder.Entity("Data.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlaylistID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnName("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VisualTypeId")
                        .HasColumnName("VisualTypeID")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("Data.Models.PlaylistItem", b =>
                {
                    b.Property<int>("PlaylistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlaylistItemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MediaSrcId")
                        .HasColumnName("MediaSrcID")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnName("PlaylistID")
                        .HasColumnType("int");

                    b.HasKey("PlaylistItemId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("MediaSrcId", "PlaylistId")
                        .IsUnique()
                        .HasName("UK_PlaylistItem");

                    b.ToTable("PlaylistItem");
                });

            modelBuilder.Entity("Data.Models.PlaylistReport", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnName("PlaylistID")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("PlayedTimeCount")
                        .HasColumnType("int");

                    b.Property<string>("PlaylistDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaylistTitle")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("PlaylistId", "DeviceId")
                        .HasName("PK_PlaylistReport_1");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LocationId");

                    b.ToTable("PlaylistReport");
                });

            modelBuilder.Entity("Data.Models.Resolution", b =>
                {
                    b.Property<int>("ResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ResolutionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ResolutionId");

                    b.HasIndex("BrandId");

                    b.ToTable("Resolution");
                });

            modelBuilder.Entity("Data.Models.Scenario", b =>
                {
                    b.Property<int>("ScenarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScenarioID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutID")
                        .HasColumnType("int");

                    b.Property<int>("AudioArea")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnName("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnName("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("ScenarioId", "LayoutId");

                    b.HasIndex("BrandId");

                    b.HasIndex("LayoutId");

                    b.ToTable("Scenario");
                });

            modelBuilder.Entity("Data.Models.ScenarioItem", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnName("PlaylistID")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioId")
                        .HasColumnName("ScenarioID")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnName("AreaID")
                        .HasColumnType("int");

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutID")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("PlaylistId", "ScenarioId", "AreaId", "LayoutId");

                    b.HasIndex("ScenarioId", "LayoutId");

                    b.HasIndex("AreaId", "ScenarioId", "PlaylistId")
                        .IsUnique()
                        .HasName("UK_ScenarioItem");

                    b.ToTable("ScenarioItem");
                });

            modelBuilder.Entity("Data.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScheduleID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayFilter")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnName("DeviceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnable")
                        .HasColumnName("isEnable")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutID")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioId")
                        .HasColumnName("ScenarioID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TimeFilter")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ScenarioId", "LayoutId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Data.Models.TimeSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SlotID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("TimeSlotFilterBinary")
                        .HasColumnType("int");

                    b.HasKey("SlotId");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("Data.Models.Area", b =>
                {
                    b.HasOne("Data.Models.Layout", "Layout")
                        .WithMany("Area")
                        .HasForeignKey("LayoutId")
                        .HasConstraintName("FK_Area_Layout")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Data.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Data.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Data.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.AspNetUsers", b =>
                {
                    b.HasOne("Data.Models.Brand", "Brand")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_AspNetUsers_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DSBuilding", b =>
                {
                    b.HasOne("Data.Models.DSUser", "DSUser")
                        .WithMany("DSBuilding")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DSMedia", b =>
                {
                    b.HasOne("Data.Models.DSMonitor", "Monitor")
                        .WithMany()
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DSMonitor", b =>
                {
                    b.HasOne("Data.Models.DSBuilding", "DSBuilding")
                        .WithMany("Monitors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Device", b =>
                {
                    b.HasOne("Data.Models.Location", "Location")
                        .WithMany("Device")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Device_Location");
                });

            modelBuilder.Entity("Data.Models.DeviceScenario", b =>
                {
                    b.HasOne("Data.Models.Device", "Device")
                        .WithMany("DeviceScenario")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("FK_DeviceScenario_Device")
                        .IsRequired();

                    b.HasOne("Data.Models.Scenario", "Scenario")
                        .WithMany("DeviceScenario")
                        .HasForeignKey("ScenarioId", "LayoutId")
                        .HasConstraintName("FK_DeviceScenario_Scenario")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Location", b =>
                {
                    b.HasOne("Data.Models.Brand", "Brand")
                        .WithMany("Location")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Location_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.MediaSrc", b =>
                {
                    b.HasOne("Data.Models.Brand", "Brand")
                        .WithMany("MediaSrc")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_MediaSrc_Brand")
                        .IsRequired();

                    b.HasOne("Data.Models.MediaType", "Type")
                        .WithMany("MediaSrc")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_MediaSrc_MediaType")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.PlaylistItem", b =>
                {
                    b.HasOne("Data.Models.MediaSrc", "MediaSrc")
                        .WithMany("PlaylistItem")
                        .HasForeignKey("MediaSrcId")
                        .HasConstraintName("FK_PlaylistItem_MediaSrc")
                        .IsRequired();

                    b.HasOne("Data.Models.Playlist", "Playlist")
                        .WithMany("PlaylistItem")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_PlaylistItem_Playlist")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.PlaylistReport", b =>
                {
                    b.HasOne("Data.Models.Device", "Device")
                        .WithMany("PlaylistReport")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("FK_PlaylistReport_Device")
                        .IsRequired();

                    b.HasOne("Data.Models.Location", "Location")
                        .WithMany("PlaylistReport")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_PlaylistReport_Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Resolution", b =>
                {
                    b.HasOne("Data.Models.Brand", "Brand")
                        .WithMany("Resolution")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Resolution_Brand")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Scenario", b =>
                {
                    b.HasOne("Data.Models.Brand", "Brand")
                        .WithMany("Scenario")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Scenario_Brand")
                        .IsRequired();

                    b.HasOne("Data.Models.Layout", "Layout")
                        .WithMany("Scenario")
                        .HasForeignKey("LayoutId")
                        .HasConstraintName("FK_Scenario_Layout")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.ScenarioItem", b =>
                {
                    b.HasOne("Data.Models.Playlist", "Playlist")
                        .WithMany("ScenarioItem")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_PlaylistScenarioArea_Playlist")
                        .IsRequired();

                    b.HasOne("Data.Models.Scenario", "Scenario")
                        .WithMany("ScenarioItem")
                        .HasForeignKey("ScenarioId", "LayoutId")
                        .HasConstraintName("FK_ScenarioItem_Scenario")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Schedule", b =>
                {
                    b.HasOne("Data.Models.Device", "Device")
                        .WithMany("Schedule")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("FK_Schedule_Device")
                        .IsRequired();

                    b.HasOne("Data.Models.Scenario", "Scenario")
                        .WithMany("Schedule")
                        .HasForeignKey("ScenarioId", "LayoutId")
                        .HasConstraintName("FK_Schedule_Scenario")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
